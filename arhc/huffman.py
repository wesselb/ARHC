from node import Node


class Huffman:

    """
    Construct a symbol code via the Huffman algorithm.

    :param symbols: List of symbols that represents the alphabet.
    """

    def __init__(self, symbols):
        self.build(symbols)

    def build(self, symbols):
        """ Build a tree of symbols according to the Huffman algorithm. """
        while len(symbols) > 1:
            self.mergeTwoLowestProbsymbols(symbols)
        self.root = symbols[0]
        self.encoding = dict(self.root.getEncoding())

    def mergeTwoLowestProbsymbols(self, symbols):
        """ Merge the two lowest probability symbols. """
        symbols.sort(key=lambda symbol: symbol.getProb())
        symbols.insert(0, Node(symbols.pop(0), symbols.pop(0)))

    def encode(self, stream):
        """ Encode the first symbol encountered in a stream by the code symbol
            generated by the Huffman algorithm. """
        symbol = ''
        while not (symbol in self.encoding):
            symbol += stream.read()
        return self.encoding[symbol]

    def decode(self, stream):
        """ Decode the first code symbol encountered in a stream by its symbol
            in string representation. """
        return self.root.decode(stream)
